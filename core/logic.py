from core.groq import lam_dep_cau_tra_loi_groq

# Gi·∫£ ƒë·ªãnh previous_answers ƒë∆∞·ª£c kh·ªüi t·∫°o trong chatchinh.py v√† truy·ªÅn v√†o n·∫øu c·∫ßn


def capnhat(user_input, user_response, history, sources=None):
    """C·∫≠p nh·∫≠t ƒëo·∫°n h·ªôi tho·∫°i + x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi sao cho ƒë·∫πp, c√≥ tr√≠ch ngu·ªìn"""
    if user_response:
        if sources:
            noi_dung_tham_khao = user_response + "\n\nüîó Ngu·ªìn tham kh·∫£o:\n" + \
                "\n".join(f"- {src}" for src in sources)
        else:
            noi_dung_tham_khao = user_response

        chatgpt_output = lam_dep_cau_tra_loi_groq(
            user_input, noi_dung_tham_khao, history
        )

        history += [
            {"role": "user", "content": user_input},
            {"role": "assistant", "content": chatgpt_output}
        ]
    else:
        chatgpt_output = f"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin cho: {user_input}"

    return chatgpt_output, history


def tieptuc_traloi(all_text, current_position):

    words = all_text.split()
    if current_position < len(words):
        next_words = words[current_position:current_position + 100]
        for word in words[current_position + 100:]:
            next_words.append(word)
            if word.endswith('.'):
                break  # D·ª´ng khi g·∫∑p d·∫•u ch·∫•m
        doan_tiep = ' '.join(next_words)
        current_position += len(doan_tiep.split())
        return doan_tiep
    else:
        return None  # Tr·∫£ v·ªÅ None n·∫øu ƒë√£ h·∫øt vƒÉn b·∫£n
