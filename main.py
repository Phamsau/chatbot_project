from flow_control import execute_command
from module_ggl import (
    luu_ngu_canh,
    search_google,
    xoa_ngucanh, xuli_doanvan_ngu_canh, tra_loi_tho
)
from module_xuli import hien_thi_vien_va_con_tro
from nghe_noi import recognize_speech1, speak_text1, speak_text
import pandas as pd
from datetime import datetime
from core.handle_input import sau, bay, tu_dien, ghi_dulieu_txt
from core.logic import tieptuc_traloi, tach_tu_khoa, capnhat
# Tr·∫°ng th√°i phi√™n tr√≤ chuy·ªán (session ƒë∆°n gi·∫£n trong b·ªô nh·ªõ)
user_context = {
    "tiep": None,
    "current_position": 99,
    "dk": False,
    "previous_answers": luu_ngu_canh("question", "answer")
}


user_context = {}


def chatbot_response(user_input):
    try:
        user_input = user_input.lower().strip()
        if not user_input:
            return "Xin vui l√≤ng cho bi·∫øt y√™u c·∫ßu c·ªßa b·∫°n"

        if "history" not in user_context:
            user_context["history"] = []

        if user_input == "x√≥a ng·ªØ c·∫£nh":
            xoa_ngucanh()
            user_context["history"] = []
            return "Ng·ªØ c·∫£nh ƒë√£ ƒë∆∞·ª£c x√≥a."

        if user_input == "ti·∫øp t·ª•c" and user_context.get("dk"):
            tiep = user_context.get("tiep")
            current_position = user_context.get("current_position", 0)
            if tiep:
                next_words = tieptuc_traloi(tiep, current_position)
                return next_words if next_words else "ƒê√£ h·∫øt vƒÉn b·∫£n."
            else:
                return "Kh√¥ng c√≥ vƒÉn b·∫£n ƒë·ªÉ tr√≠ch xu·∫•t."

        # Tra trong ng·ªØ c·∫£nh tr∆∞·ªõc
        text = xuli_doanvan_ngu_canh(user_input)
        if text:
            user_response = tra_loi_tho(user_input, text)
            chatgpt_output, updated_history = capnhat(
                user_input, user_response, user_context["history"])
            user_context["history"] = updated_history[-20:]
            return chatgpt_output

        # Tra theo t·ª´ ƒëi·ªÉn n·ªôi b·ªô
        ct1 = sau(user_input)
        ct2 = bay(user_input)

        if ct1 and ct2:
            output = tu_dien.get(ct1)
            luu_ngu_canh(user_input, output)
            chatgpt_output, updated_history = capnhat(
                user_input, output, user_context["history"])
            user_context["history"] = updated_history[-20:]
            return chatgpt_output

        if ct1 in danh_muc():
            if ct1 == "ng√†y m·∫•y":
                return f"H√¥m nay l√† {datetime.now().strftime('%d/%m/%Y')}"
            elif ct1 == "m·∫•y gi·ªù r·ªìi":
                return f"B√¢y gi·ªù l√† {datetime.now().strftime('%H:%M')}"
            return tu_dien.get(ct1)

        # Cu·ªëi c√πng: tra Google
        user_response, tiep = search_google(user_input)
        user_context["tiep"] = tiep
        user_context["dk"] = True
        user_context["current_position"] = len(user_response.split())

        chatgpt_output, updated_history = capnhat(
            user_input, user_response, user_context["history"])
        user_context["history"] = updated_history[-20:]

        # Ghi d·ªØ li·ªáu m·ªõi v√†o file
        # ghi_dulieu_txt(user_input, chatgpt_output)

        return chatgpt_output

    except Exception as e:
        return f"L·ªói: {str(e)}"


def danh_muc():
    return [
        "ng√†y m·∫•y", "m·∫•y gi·ªù r·ªìi", "ƒë·∫∑t ph√≤ng", "th·ªùi ti·∫øt", "danh t·ª´",
        "t√≠nh t·ª´", "ƒë·ªông t·ª´", "xem ·∫£nh", "th√¥ng d·ªãch", "phi√™n d·ªãch"
    ]


def main():
    list_cmd = [
        "Ok, T√¥i s·∫µn s√†ng, xin b·∫°n ch·ªù trong gi√¢y l√°t",
        "Ok, m·ªùi b·∫°n nghe th√¥ng tin th·ªùi ti·∫øt c·ªßa ch√∫ng t√¥i",
        "Ok, m·ªùi b·∫°n b·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω ƒë·∫∑t ph√≤ng.",
        "Ok, xin cho bi·∫øt b·∫°n tr·∫£ ph√≤ng s·ªë m·∫•y?",
        "OK M·ªùi b·∫°n xem h√¨nh em Ng·ªçc Trinh",
        "ƒê√£ xem ·∫£nh"
    ]

    dk = False
    cv = True
    no_speech_count = 0
    tiep = ""
    history = []

    try:
        speak_text("Xin ch√†o, t√¥i gi√∫p ƒë∆∞·ª£c g√¨ cho b·∫°n?")
        xoa_ngucanh()

        while True:
            if cv:
                user_input = input("User: ")
            else:
                user_input = recognize_speech1().strip().replace('\n', '')

            if user_input.lower() == "ok" or no_speech_count >= 2:
                speak_text("Ch∆∞∆°ng tr√¨nh ƒë√£ tho√°t")
                break

            elif user_input.lower() == "thay ƒë·ªïi":
                cv = not cv
                chatgpt_output = "m·ªùi b·∫°n ti·∫øp t·ª•c tr√≤ chuy·ªán"

            elif user_input.lower() == "ti·∫øp t·ª•c" and dk:
                if tiep:
                    next_words = tieptuc_traloi(tiep, current_position)
                    chatgpt_output = next_words or "ƒê√£ h·∫øt vƒÉn b·∫£n."
                    dk = bool(next_words)
                else:
                    chatgpt_output = "Kh√¥ng c√≥ vƒÉn b·∫£n ƒë·ªÉ tr√≠ch xu·∫•t."

            elif user_input.lower() == "x√≥a ng·ªØ c·∫£nh":
                chatgpt_output = "Ok, Ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán ƒë√£ x√≥a"
                xoa_ngucanh()
                history = []

            elif user_input == "":
                chatgpt_output = "Xin vui l√≤ng cho bi·∫øt y√™u c·∫ßu c·ªßa b·∫°n"

            else:
                dk = False
                user_input = user_input.lower().strip()
                text = xuli_doanvan_ngu_canh(user_input)
                best_related_answer = None

                if text:
                    best_related_answer = tra_loi_tho(user_input, text)

                if best_related_answer:
                    chatgpt_output, updated_history = capnhat(
                        user_input, best_related_answer, history)
                    history = updated_history[-20:]

                else:
                    ct1 = sau(user_input)
                    ct2 = bay(user_input)
                    print(ct1, ct2)

                    if ct1 and ct2 and ct1 in tu_dien and ct1 in ct2:
                        chatgpt_output, updated_history = capnhat(
                            user_input, tu_dien[ct1], history)
                        history = updated_history[-20:]
                        luu_ngu_canh(user_input, chatgpt_output)

                    elif ct1 in danh_muc() and not ct2:
                        if ct1 == "ng√†y m·∫•y":
                            chatgpt_output = f"H√¥m nay l√† {datetime.now().strftime('%d/%m/%Y')}"
                        elif ct1 == "m·∫•y gi·ªù r·ªìi":
                            chatgpt_output = f"B√¢y gi·ªù l√† {datetime.now().strftime('%H:%M')}"
                        else:
                            chatgpt_output = tu_dien.get(ct1)

                    else:
                        user_response, tiep = search_google(user_input)
                        dk = True
                        current_position = len(user_response.split())
                        chatgpt_output, updated_history = capnhat(
                            user_input, user_response, history)
                        history = updated_history[-20:]

                        # üîÅ L∆∞u d·ªØ li·ªáu v√†o file .txt n·∫øu l√† t·ª´ Google
                        # ghi_dulieu_txt(user_input, chatgpt_output)

            hien_thi_vien_va_con_tro(chatgpt_output)

            if not cv:
                speak_text1(chatgpt_output)

            if chatgpt_output == "h√¥m nay l√† ng√†y":
                speak_text(datetime.now().strftime("%d/%m/%Y"))

            if chatgpt_output == "hi·ªán t·∫°i l√†":
                speak_text(datetime.now().strftime("%H:%M"))

            if chatgpt_output in list_cmd:
                execute_command(chatgpt_output)

            if user_input == "":
                no_speech_count += 1
            else:
                no_speech_count = 0

    except Exception as e:
        print(f"L·ªói x·∫£y ra: {e}")


if __name__ == "__main__":
    main()
